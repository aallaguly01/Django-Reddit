Требования к семестровой работе


Основное (max 4 points):
+ 1. Авторизация + регистрация (1 point)
+ 2. Есть загрузка файлов на сервер (0.5 point)
+ 3. Админка: просмотр всех таблиц БД (визуально понятно) + редактирование/добавление данных в БД. Админка должна быть кастомизирована, реализуя возможность сортировать и фильтровать данные по определенному содержимому (1.5 points)
4. Приложение должно быть задеплоено на heroku.com или альтернативный хостинг (для heroku нужен PosgreSQL) (0.5 point)
+ 5. gitignore, virtualenv (0.5 points)
Модели и бд (max 4 points):
4 1. Не менее 10 моделей, не включая встроенную модель пользователя. (1 point)
+ 2. Использование различных типов полей - чистовых, строковых полей, даты/времени, URLField, ForeignKey, ManyToManyField, FileField/ImageField. (1 point)
-+3. Обязательно использование запросов с классами F и Q, запросов с использованием lookup-ов (например name＿icontains) и агрегации. (1 point)
+ 4. Оптимизация запросов: select_related, prefetch_related, values_list (1 point)
Urls (max 2 points):
+ 1. Не менее 2 приложений в проекте (не считая admin). Использовать разделенные URL, использовать namespaces. (1 point)
+ 2. Использование hard code URL в шаблонах и .ру-файлах запрещено. (0.5 points)
+ 3. Один из путей должен использовать re_path с использованием именованной группы (<?Р<что-то>…). ( 0.5 points)
Forms (max 2 points):
+ 1. Использовать как минимум три POST формы (без учёта авторизации и регистрации) (1 point)
+-2. Формы обязательно должны содержать все следующие компоненты (хотя бы в одной из 3х форм): текстовое поле, многострочное текстовое поле, выпадающий список, чекбоксы, переключатели, ввод пароля, поле загрузки файла. (1 point)
Views (max 4.5 points):
+ 1. views должны быть реализованы как function-based, так и class-based. Предпочтительнее использование CBV. Несколько views должно быть обязательно сделано с использованием generic views. (В ваших же интересах, потому что так легче) (2 points)
+ 2. Наличие страницы, доступ к которой имеет только авторизованный пользователь. (0.5 points)
+ 3. Необходимо правильно обрабатывать ошибки, чтобы сервер не падал с 500. (0.5 points)
- 4. Покрыть все страницы тестами (1.5 points)
Front-end (max 2 points):
+ 1. Не менее 10 страниц на сайте (т.е. 10 разных URL, ведущих к 10 разным template). В шаблонах обязательно использовать наследование, циклы и условия. (1 point)
+ 2. Меню сайта из 5 и более пунктов, обязательные хедер и футер (верх и низ) сайта. (0.5 points)
+ 3. Использование статических данных - таблиц стилей, js (можно использовать готовые библиотеки, например, twitter bootstrap, jquery и др.), картинок. (0.5 points)
REST API (max 4.5 points):
+ 1. API для аутентифицированного пользователя для CRUD операций одной или несколько сущностей с использованием библиотеки DRF и использование этого запроса на сайте (1.5 points)
+ 2. Документация в Swagger (1 point)
3. Покрыть API тестами (2 points)
Celery (max 3 points):
+-1. Реализовать сброс пароля по почте с помощью фоновой задачи (1.5 points)
+ 2. Реализовать задачу по расписанию (1.5 points)
+
WebSockets (max 4 points):
- 1. Реализовать чат на веб-сокетах (например, чат техподдержки) (4 points)


++
 Pagination
 Celery
 +-Search

SUM: 30 points
Есть возможность заработать до 5 дополнительных баллов за оригинальные решения, не входящие в требования.